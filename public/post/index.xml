<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on R2</title>
    <link>/post/</link>
    <description>Recent content in Posts on R2</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dónde abrir el local de comidas?</title>
      <link>/2017/11/26/donde-abrir-local-de-comidas/</link>
      <pubDate>Sun, 26 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/11/26/donde-abrir-local-de-comidas/</guid>
      <description>Hace un tiempo un amigo de un amigo me pidió ayuda para determinar cuál era el mejor lugar para abrir un local de comidas usando datos públicos disponibles. Se trataba de un servicio con modalidad ‘take-away’, que brindaría una oferta económica de comida saludable para el almuerzo. Básicamente, el público en el que estaba pensando era gente que trabaja en oficinas.
Lo primero que hicimos fue tratar de mapear la oferta y demanda existente.</description>
    </item>
    
    <item>
      <title>Kilómetros construidos de subte en distintas ciudades</title>
      <link>/2017/11/02/kms-de-subte-en-ciudades/</link>
      <pubDate>Thu, 02 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/11/02/kms-de-subte-en-ciudades/</guid>
      <description>Gráfico interactivo de líneas simple con Plotly comparando kilómetros constuidos de Subte en distintas ciudades. Los datos utilizados son de citylines.com
library(shiny) library(plotly) library(dplyr) subte_comp &amp;lt;- read.csv(&amp;quot;subte_comp.csv&amp;quot;) # Define la interfaz de usuario ui &amp;lt;- fluidPage( # Define el título titlePanel(&amp;quot;Kilómetros constuidos de subte en distintas ciudades&amp;quot;), # Define el layout sidebarLayout( # Define el panel lateral sidebarPanel( # Define el checkbox para seleccionar las ciudades checkboxGroupInput(&amp;quot;elegir_ciudades&amp;quot;, label = &amp;quot;Eligir ciudades&amp;quot;, choices = c(&amp;quot;Buenos Aires&amp;quot;, &amp;quot;Madrid&amp;quot;, &amp;quot;Sao Paulo&amp;quot;, &amp;quot;Santiago&amp;quot;))), # Define el panel principal mainPanel( plotlyOutput(&amp;quot;subtePlot&amp;quot;) ) ) ) # Define server logic required to draw a histogram server &amp;lt;- function(input, output) { # &amp;#39;Escucha&amp;#39; las ciudades seleccionadas en el checkbox para subsetear los datos subte_data=reactive({ return(subte_comp[subte_comp$Ciudad %in% input$elegir_ciudades,]) }) output$subtePlot &amp;lt;- renderPlotly({ # Define el gráfico de líneas plot_ly(data = subte_data(), x = ~Finalizacion, y = ~Value, color = ~Ciudad, type = &amp;quot;scatter&amp;quot;, mode = &amp;quot;lines&amp;quot;) }) } # Corre la app shinyApp(ui = ui, server = server) Shiny applications not supported in static R Markdown documents  </description>
    </item>
    
    <item>
      <title>Mapeando estacionamientos (no construidos)</title>
      <link>/2017/10/31/mapeando-estacionamientos-no-construidos/</link>
      <pubDate>Tue, 31 Oct 2017 21:48:51 -0700</pubDate>
      
      <guid>/2017/10/31/mapeando-estacionamientos-no-construidos/</guid>
      <description>Aquí voy a compartir el código para la visualización que acompañó éste artículo de Juan Pablo Pilatti, del Instituto iCiudad donde utilizamos Shiny y Leaflet para hacer un mapa interactivo de los estacionamientos aprobados por la Legislatura pero nunca construidos por el Ejecutivo.
library(shiny)library(leaflet)library(sp)library(sf)library(rgdal)# Define la interfaz de usuarioui &amp;lt;- shinyUI(# fluidPage es un layout común de ShinyfluidPage(# Título principaltitlePanel(&amp;quot;Estacionamientos Aprobados por Ley&amp;quot;),# Situa el mapa de leaflet en el panel principalmainPanel(leafletOutput(&amp;quot;map&amp;quot;, width = 800, height = 800))))# Define la función en el servidorserver &amp;lt;- function(input, output) {# Descarga los datosestac_sf &amp;lt;- read.</description>
    </item>
    
  </channel>
</rss>