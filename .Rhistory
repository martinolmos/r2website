break()
}
}
names(c)
names(yelp_df4)
b$total
c <- do.call("rbind", lapply(b$businesses, function(x) {
return(as.data.frame(t(as.matrix(unlist(x)))))}))
c <- do.call("rbind", lapply(b$businesses, function(x) {
return(as.data.frame(t(as.matrix(x))))}))
yelp_df4 <- rbind(yelp_df4, c)
library(dplyr)
cat_title <- lapply(yelp_df4$categories, function(x) {
sapply(x, function(y) {
return(y$title)
})
})
cat_title2 <- as.character(cat_title) %>%
gsub(x = cat_title2, pattern = "list( | \\)", replacement = "")
cat_title2 <- as.character(cat_title) %>%
gsub(x = cat_title, pattern = "list( | \\)", replacement = "")
cat_title2 <- as.character(cat_title) %>%
gsub(x = cat_title, pattern = "list\( | \\)", replacement = "")
cat_title2 <- as.character(cat_title) %>%
gsub(x = cat_title, pattern = "list\\( | \\)", replacement = "")
View(yelp_df2)
View(yelp_df4)
cat_title
gsub(x = as.character(cat_title), pattern = "list\\( | \\)", replacement = "")
as.character(cat_title)
gsub(x = as.character(cat_title), pattern = "c\(\\", replacement = "")
gsub(x = as.character(cat_title), pattern = "c\\(\\", replacement = "")
gsub(x = as.character(cat_title), pattern = "c(\\", replacement = "")
gsub(x = as.character(cat_title), pattern = "c(\\", replacement = "")
gsub(x = as.character(cat_title), pattern = "c\\(\\", replacement = "")
gsub(x = as.character(cat_title), pattern = "c\(\\", replacement = "")
gsub(x = as.character(cat_title), pattern = "c\\(\\", replacement = "")
gsub(x = as.character(cat_title), pattern = "c\\(", replacement = "")
gsub(x = as.character(cat_title), pattern = "c\\( || \\)", replacement = "")
gsub(x = as.character(cat_title), pattern = "c\\( | \\)", replacement = "")
gsub(x = as.character(cat_title), pattern = "c\\( | \)", replacement = "")
gsub(x = as.character(cat_title), pattern = "c\\( | \\)", replacement = "")
gsub(x = as.character(cat_title), pattern = "c\\(", replacement = "")
gsub(x = as.character(cat_title), pattern = "c\\( || \\", replacement = "")
gsub(x = as.character(cat_title), pattern = "\\", replacement = "")
gsub(x = as.character(cat_title), pattern = "[[:punct:]]", replacement = "")
gsub(x = as.character(cat_title), pattern = "c\\( | [[:punct:]]", replacement = "")
gsub(x = as.character(cat_title), pattern = "c\( | [[:punct:]]", replacement = "")
gsub(x = as.character(cat_title), pattern = "c\\(", replacement = "")
as.character(cat_title) %>%
gsub(pattern = "c\\(", replacement = "") %>%
gsub(pattern =  "[[:punct:]]", replacement = "")
save.image("~/Yelp/yelp2.RData")
View(b)
#### CONTINUAR!!
cat_title2 <- as.character(cat_title) %>%
gsub(pattern = "c\\(", replacement = "") %>%
gsub(pattern =  "(?!,)[[:punct:]]", replacement = "")
library(dplyr)
#### CONTINUAR!!
cat_title2 <- as.character(cat_title) %>%
gsub(pattern = "c\\(", replacement = "") %>%
gsub(pattern =  "(?!,)[[:punct:]]", replacement = "")
#### CONTINUAR!!
cat_title2 <- as.character(cat_title) %>%
gsub(pattern = "c\\(", replacement = "") %>%
gsub(pattern =  "(?!\\,)[[:punct:]]", replacement = "")
#### CONTINUAR!!
cat_title2 <- as.character(cat_title) %>%
gsub(pattern = "c\\(", replacement = "") %>%
gsub(pattern =  "(?!\,)[[:punct:]]", replacement = "")
#### CONTINUAR!!
cat_title2 <- as.character(cat_title) %>%
gsub(pattern = "c\\(", replacement = "") %>%
gsub(pattern =  "[^[:alnum:],]", replacement = "")
cat_title2
#### CONTINUAR!!
cat_title2 <- as.character(cat_title) %>%
gsub(pattern = "c\\(", replacement = "") %>%
gsub(pattern =  "[^[:alnum:][:space:],]", replacement = "")
cat_title2
# Transforma y limpia la columna de coordenadas de Yelp
yelp_df4$coordinates <- yelp_df4$coordinates %>%
as.character() %>%
gsub(pattern = "list\\(", replacement = "")
View(yelp_df4)
# Elimina los signos de puntuación, excepto por los espacios y las comas
yelp_df4$categories <- as.character(cat_title) %>%
gsub(pattern = "c\\(", replacement = "") %>%
gsub(pattern =  "[^[:alnum:][:space:],]", replacement = "")
View(yelp_df4)
yelp_df4 <- separate(data = yelp_df4, col = coordinates, into = c("lat", "long"), sep = ", ")
library(tidyr)
yelp_df4 <- separate(data = yelp_df4, col = coordinates, into = c("lat", "long"), sep = ", ")
yelp_df4$lat <- gsub(pattern = "latitude = ", replacement = "", x = yelp_df2$lat) %>%
as.numeric()
yelp_df4$long <- yelp_df4$long %>%
gsub(pattern = "longitude = ", replacement = "") %>%
as.numeric()
class(yelp_df4$lat)
class(yelp_df4$long)
yelp_df4$lat <- yelp_df4$lat %>%
gsub(pattern = "latitude = ", replacement = "") %>%
as.numeric()
yelp_df4$long <- yelp_df4$long %>%
gsub(pattern = "longitude = ", replacement = "") %>%
as.numeric()
# Convierte cada columna (excepto 'lat' y 'long') en character y el objeto en dataframe
yelp_df4 <- apply(yelp_df4[,-c('lat', 'long')], 2, as.character)
names(yelp_df4)
# Convierte cada columna (excepto 'lat' y 'long') en character y el objeto en dataframe
yelp_df4 <- apply(yelp_df4[,!c('lat', 'long')], 2, as.character)
# Convierte cada columna (excepto 'lat' y 'long') en character y el objeto en dataframe
yelp_df4 <- apply(yelp_df4[,-(c('lat', 'long'))], 2, as.character)
# Convierte cada columna (excepto 'lat' y 'long') en character y el objeto en dataframe
yelp_df4 <- apply(yelp_df4[,!(c('lat', 'long'))], 2, as.character)
# Convierte cada columna (excepto 'lat' y 'long') en character y el objeto en dataframe
yelp_df4 <- apply(yelp_df, 2, as.character)
yelp_df4 <- as.data.frame(yelp_df4)
yelp_df4$lat <- as.numeric(yelp_df4$lat)
yelp_df4$long <- as.numeric(yelp_df4$long)
yelp_df4 <- data.frame()
yelp_df4 <- rbind(yelp_df4, c)
# Elimina los signos de puntuación, excepto por los espacios y las comas
yelp_df4$categories <- as.character(cat_title) %>%
gsub(pattern = "c\\(", replacement = "") %>%
gsub(pattern =  "[^[:alnum:][:space:],]", replacement = "")
# Extrae el 'Title' de cada categoría
cat_title <- lapply(yelp_df4$categories, function(x) {
sapply(x, function(y) {
return(y$title)
})
})
# Elimina los signos de puntuación, excepto por los espacios y las comas
yelp_df4$categories <- as.character(cat_title) %>%
gsub(pattern = "c\\(", replacement = "") %>%
gsub(pattern =  "[^[:alnum:][:space:],]", replacement = "")
# Transforma y limpia la columna de coordenadas de Yelp
yelp_df4$coordinates <- yelp_df4$coordinates %>%
as.character() %>%
gsub(pattern = "list\\(", replacement = "")
# Transforma y limpia la columna de coordenadas de Yelp
yelp_df4$coordinates <- yelp_df4$coordinates %>%
as.character() %>%
gsub(pattern = "list\\(|\\) ", replacement = "")
# Transforma y limpia la columna de coordenadas de Yelp
yelp_df4$coordinates <- yelp_df4$coordinates %>%
as.character() %>%
gsub(pattern = "list\\(||\\) ", replacement = "")
View(yelp_df4)
# Transforma y limpia la columna de coordenadas de Yelp
yelp_df4$coordinates <- yelp_df4$coordinates %>%
as.character() %>%
gsub(pattern = "list\\(|\) ", replacement = "")
# Transforma y limpia la columna de coordenadas de Yelp
yelp_df4$coordinates <- yelp_df4$coordinates %>%
as.character() %>%
gsub(pattern = "list\\(|\\) ", replacement = "")
gsub(pattern = "list\\(|\\) ", replacement = "", x = yelp_df4$coordinates)
gsub(pattern = "list\\(||\\) ", replacement = "", x = yelp_df4$coordinates)
yelp_df4 <- rbind(yelp_df4, c)
gsub(pattern = "list\\(||\\) ", replacement = "", x = yelp_df4$coordinates)
gsub(pattern = "list\\(|\\) ", replacement = "", x = yelp_df4$coordinates)
gsub(pattern = "list\\(&\\) ", replacement = "", x = yelp_df4$coordinates)
yelp_df4 <- rbind(yelp_df4, c)
gsub(pattern = "list\\(&\\)", replacement = "", x = yelp_df4$coordinates)
gsub(pattern = "list\\(|\\)", replacement = "", x = yelp_df4$coordinates)
# Transforma y limpia la columna de coordenadas de Yelp
yelp_df4$coordinates <- yelp_df4$coordinates %>%
as.character() %>%
gsub(pattern = "list\\(|\\)", replacement = "")
# Elimina los signos de puntuación, excepto por los espacios y las comas
yelp_df4$categories <- as.character(cat_title) %>%
gsub(pattern = "c\\(", replacement = "") %>%
gsub(pattern =  "[^[:alnum:][:space:],]", replacement = "")
yelp_df4 <- separate(data = yelp_df4, col = coordinates, into = c("lat", "long"), sep = ", ")
yelp_df4$lat <- yelp_df4$lat %>%
gsub(pattern = "latitude = ", replacement = "") %>%
yelp_df4$long <- yelp_df4$long %>%
gsub(pattern = "longitude = ", replacement = "") %>%
# Transfor y limpia la columna de direccion de Yelp
address_yelp <- lapply(yelp_df4$location, function(x) {
return(x$address1[1])
})
yelp_df4$lat <- yelp_df4$lat %>%
gsub(pattern = "latitude = ", replacement = "")
yelp_df4$long <- yelp_df4$long %>%
gsub(pattern = "longitude = ", replacement = "")
# Transfor y limpia la columna de direccion de Yelp
address_yelp <- lapply(yelp_df4$location, function(x) {
return(x$address1[1])
})
yelp_df4$location <- as.character(address_yelp)
# Convierte cada columna (excepto 'lat' y 'long') en character y el objeto en dataframe
yelp_df4 <- apply(yelp_df, 2, as.character)
yelp_df4 <- as.data.frame(yelp_df4)
yelp_df4$lat <- as.numeric(yelp_df4$lat)
yelp_df4$long <- as.numeric(yelp_df4$long)
# Carga las librerías que vamos a necesitar
library(dplyr)
library(tidyr)
library(leaflet)
# Link de descarga de los datos del relevamiento de usos del suelo
usos_url <- "https://data.buenosaires.gob.ar/api/files/relevamiento-usos-del-suelo-2011.csv/download/csv"
myfile <- download.file(url = usos_url, destfile = "usos.csv", mode = "wb")
# Descarga los datos
usos <- read.csv("usos.csv",
sep = ";",
header = TRUE,
stringsAsFactors = FALSE)
oficinas <- usos %>% filter(tipo_2 == "OFICINAS" |
rama1 == "INTERMEDIACION FINANCIERA Y AUXILIARES" |
rama1 == "ADMINISTRACION PUBLICA, DEFENSA Y SEGURIDAD SOCIAL OBLIGATORIA" |
rama1 == "SERVICIOS DE SEGUROS Y DE ADMINISTRACION DE FONDOS DE JUBILACIONES Y PENSIONES")
View(oficinas)
View(yelp_df4)
yelp_df4 <- rbind(yelp_df4, c)
yelp_df4 <- data.frame()
yelp_df4 <- rbind(yelp_df4, c)
# Extrae el 'Title' de cada categoría
cat_title <- lapply(yelp_df4$categories, function(x) {
sapply(x, function(y) {
return(y$title)
})
})
# Elimina los signos de puntuación, excepto por los espacios y las comas
yelp_df4$categories <- as.character(cat_title) %>%
gsub(pattern = "c\\(", replacement = "") %>%
gsub(pattern =  "[^[:alnum:][:space:],]", replacement = "")
# Convierte a 'character' y elimina los caracteres resabio del tipo 'list'
yelp_df4$coordinates <- yelp_df4$coordinates %>%
as.character() %>%
gsub(pattern = "list\\(|\\)", replacement = "")
# Separa la variable 'coordinates' en 'lat' y 'long'
yelp_df4 <- separate(data = yelp_df4, col = coordinates, into = c("lat", "long"), sep = ", ")
# Elimina la palabra 'latitude'
yelp_df4$lat <- yelp_df4$lat %>%
gsub(pattern = "latitude = ", replacement = "")
# Elimina la palabra 'longitude'
yelp_df4$long <- yelp_df4$long %>%
gsub(pattern = "longitude = ", replacement = "")
# Extrae 'address' de 'location'
address_yelp <- lapply(yelp_df4$location, function(x) {
return(x$address1[1])
})
# Convierte a 'character'
yelp_df4$location <- as.character(address_yelp)
# Convierte cada columna (excepto 'lat' y 'long') en character y el objeto en dataframe
yelp_df4 <- apply(yelp_df, 2, as.character)
yelp_df4 <- as.data.frame(yelp_df4)
yelp_df4$lat <- as.numeric(yelp_df4$lat)
yelp_df4$long <- as.numeric(yelp_df4$long)
View(yelp_df4)
yelp_df4 <- data.frame()
yelp_df4 <- rbind(yelp_df4, c)
# Convierte a 'character' y elimina los caracteres resabio del tipo 'list'
yelp_df4$coordinates <- yelp_df4$coordinates %>%
as.character() %>%
gsub(pattern = "list\\(|\\)", replacement = "")
# Separa la variable 'coordinates' en 'lat' y 'long'
yelp_df4 <- separate(data = yelp_df4, col = coordinates, into = c("lat", "long"), sep = ", ")
# Elimina la palabra 'latitude'
yelp_df4$lat <- yelp_df4$lat %>%
gsub(pattern = "latitude = ", replacement = "")
# Elimina la palabra 'longitude'
yelp_df4$long <- yelp_df4$long %>%
gsub(pattern = "longitude = ", replacement = "")
class(yelp_df4$lat)
as.numeric(yelp_df4$lat)
# Extrae el 'Title' de cada categoría
cat_title <- lapply(yelp_df4$categories, function(x) {
sapply(x, function(y) {
return(y$title)
})
})
# Elimina los signos de puntuación, excepto por los espacios y las comas
yelp_df4$categories <- as.character(cat_title) %>%
gsub(pattern = "c\\(", replacement = "") %>%
gsub(pattern =  "[^[:alnum:][:space:],]", replacement = "")
# Extrae 'address' de 'location'
address_yelp <- lapply(yelp_df4$location, function(x) {
return(x$address1[1])
})
# Convierte a 'character'
yelp_df4$location <- as.character(address_yelp)
# Convierte cada columna (excepto 'lat' y 'long') en character y el objeto en dataframe
yelp_df4 <- apply(yelp_df, 2, as.character)
yelp_df4$lat <- as.numeric(yelp_df4$lat)
class(yelp_df4)
yelp_df4 <- as.data.frame(yelp_df4)
yelp_df4$lat <- as.numeric(yelp_df4$lat)
class(yelp_df4$long)
# Convierte cada columna (excepto 'lat' y 'long') en character y el objeto en dataframe
yelp_df4 <- apply(yelp_df, 2, class)
yelp_df4 <- data.frame()
yelp_df4 <- rbind(yelp_df4, c)
yelp_df4 <- as.data.frame(yelp_df4, stringAsFactor = FALSE)
class(yelp_df4)
apply(yelp_df4, 2, class)
# Extrae el 'Title' de cada categoría
cat_title <- lapply(yelp_df4$categories, function(x) {
sapply(x, function(y) {
return(y$title)
})
})
# Elimina los signos de puntuación, excepto por los espacios y las comas
yelp_df4$categories <- as.character(cat_title) %>%
gsub(pattern = "c\\(", replacement = "") %>%
gsub(pattern =  "[^[:alnum:][:space:],]", replacement = "")
# Convierte a 'character' y elimina los caracteres resabio del tipo 'list'
yelp_df4$coordinates <- yelp_df4$coordinates %>%
as.character() %>%
gsub(pattern = "list\\(|\\)", replacement = "")
# Separa la variable 'coordinates' en 'lat' y 'long'
yelp_df4 <- separate(data = yelp_df4, col = coordinates, into = c("lat", "long"), sep = ", ")
# Elimina la palabra 'latitude'
yelp_df4$lat <- yelp_df4$lat %>%
gsub(pattern = "latitude = ", replacement = "")
# Elimina la palabra 'longitude'
yelp_df4$long <- yelp_df4$long %>%
gsub(pattern = "longitude = ", replacement = "")
# Extrae 'address' de 'location'
address_yelp <- lapply(yelp_df4$location, function(x) {
return(x$address1[1])
})
# Convierte a 'character'
yelp_df4$location <- as.character(address_yelp)
# Convierte cada columna (excepto 'lat' y 'long') en character y el objeto en dataframe
yelp_df4 <- apply(yelp_df4, 2, as.character)
yelp_df4 <- as.data.frame(yelp_df4, stringAsFactor = FALSE)
apply(yelp_df4, 2, class)
class(yelp_df4$lat)
class(yelp_df4$long)
class(yelp_df4$id)
class(yelp_df4$name)
# Convierte cada columna (excepto 'lat' y 'long') en character y el objeto en dataframe
yelp_df4 <- apply(yelp_df4, 2, as.character)
class(yelp_df4)
yelp_df4 <- as.data.frame(yelp_df4, stringsAsFactor = FALSE)
class(yelp_df4)
class(yelp_df4$name)
class(yelp_df4$id)
# Convierte cada columna (excepto 'lat' y 'long') en character y el objeto en dataframe
yelp_df4 <- apply(yelp_df4, 2, as.character)
yelp_df4 <- as.data.frame(yelp_df4, stringsAsFactor = FALSE)
# Convierte cada columna (excepto 'lat' y 'long') en character y el objeto en dataframe
yelp_df4 <- apply(yelp_df4, 2, as.character)
yelp_df4 <- as.data.frame(yelp_df4, stringsAsFactors = FALSE)
class(yelp_df4$lat)
yelp_df4$lat <- as.numeric(yelp_df4$lat)
yelp_df4$long <- as.numeric(yelp_df4$long)
leaflet() %>%
addTiles() %>%
addMarkers(data = oficinas,
lng = x,
lat = y,
clusterOptions = markerClusterOptions()) %>%
addMarkers(data = yelp_df4, lng = long, lat = lat)
leaflet() %>%
addTiles() %>%
addMarkers(data = oficinas,
lng = ~x,
lat = ~y,
clusterOptions = markerClusterOptions()) %>%
addMarkers(data = yelp_df4, lng = ~long, lat = ~lat)
leaflet() %>%
addTiles() %>%
addMarkers(data = oficinas,
lng = ~x,
lat = ~y,
clusterOptions = markerClusterOptions()) %>%
addMarkers(data = yelp_df4, lng = ~long, lat = ~lat)
leaflet() %>%
addTiles() %>%
addMarkers(data = oficinas,
lng = ~x,
lat = ~y,
clusterOptions = markerClusterOptions()) %>%
addMarkers(data = yelp_df4, lng = ~long, lat = ~lat)
library(dplyr)
leaflet() %>%
addTiles() %>%
addMarkers(data = oficinas,
lng = ~x,
lat = ~y,
clusterOptions = markerClusterOptions()) %>%
addMarkers(data = yelp_df4, lng = ~long, lat = ~lat)
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(data = oficinas,
lng = ~x,
lat = ~y,
clusterOptions = markerClusterOptions()) %>%
addMarkers(data = yelp_df4, lng = ~long, lat = ~lat)
View(yelp_df4)
blogdown:::serve_site()
blogdown:::serve_site()
b$total
total <- 1
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
# Descarga los datos de Yelp!
# Credenciales para la Yelp API
client_id <- "G6XcL9wmLQ0jT1m-Vc4CPw"
client_secret <- "4Q18wXh1KLFt0FTrPZdJSPh95P7ZqbZ6t7n3Z6Quzb6XuNspAYQmSMUyZSGDetOv"
# Gestiona el token
res <- POST("https://api.yelp.com/oauth2/token",
body = list(grant_type = "client_credentials",
client_id = client_id,
client_secret = client_secret))
library(dplyr)
library(tidyr)
library(leaflet)
library(httr)
# Descarga los datos de Yelp!
# Credenciales para la Yelp API
client_id <- "G6XcL9wmLQ0jT1m-Vc4CPw"
client_secret <- "4Q18wXh1KLFt0FTrPZdJSPh95P7ZqbZ6t7n3Z6Quzb6XuNspAYQmSMUyZSGDetOv"
# Gestiona el token
res <- POST("https://api.yelp.com/oauth2/token",
body = list(grant_type = "client_credentials",
client_id = client_id,
client_secret = client_secret))
token <- content(res)$access_token
# Endpoint de Yelp
yelp <- "https://api.yelp.com/v3"
# Los parámetros de búsqueda están en https://www.yelp.co.uk/developers/documentation/v3/business_search
location <- "Buenos Aires"
categories <- "salad,vegan,vegetarian,delis,delicatessen"
term <- "para llevar"
limit <- 50
offset <- 1
price <- "1,2"
# Todavía no sabemos la cantidad de resultados por lo que lo inicializamos con un valor de offset + 1
total <- offset + 1
# Crea un data.frame donde vamos a guardar los resultados
yelp_df <- data.frame
# Loop hasta llegar al limite de 1000 resultados
while(offset < total) {
# Construye el url de acuerdo al query deseado
url <- modify_url(url = yelp,
path = c("v3", "businesses", "search"),
query = list(location = location,
limit = limit,
offset = offset,
term = term,
price = price))
# Hace el requerimiento de los datos
res <- GET(url = url, add_headers('Authorization' = paste("bearer", token)))
# Chequea si el requerimiento fue exitoso
a <- http_status(res)
if(a$category=='Success') {
# Descarga el contenido
b <- content(res)
# Lo convierte en un data.frame
c <- do.call("rbind", lapply(b$businesses, function(x) {
return(as.data.frame(t(as.matrix(x))))}))
yelp_df <- rbind(yelp_df, c)
# Actualiza el número de resultados totales
total <- b$total
# Actualiza el valor de 'offset'
offset = offset + 50
} else {
break()
}
}
yelp_df <- rbind(yelp_df, c)
# Crea un data.frame donde vamos a guardar los resultados
yelp_df <- data.frame()
yelp_df <- rbind(yelp_df, c)
blogdown:::serve_site()
blogdown:::serve_site()
load("~/Yelp/yelp2.RData")
knitr::opts_chunk$set(echo = FALSE, cache = FALSE, fig.align = 'center', message=FALSE, warning=FALSE, error=FALSE)
setwd("C:/Users/marti/Documents/Yelp")
library(sp)
library(sf)
library(rgdal)
library(gdalUtils)
library(tmap)
library(dplyr)
library(tidyr)
library(stringr)
library(spdplyr)
library(leaflet)
library(plotly)
library(plotrix)
library(wordcloud)
library(RColorBrewer)
library(ggplot2)
library(ggmap)
load("yelp2.RData")
piechar_data <- read.csv("Piechar.csv")
leaflet() %>%
addTiles() %>%
addMarkers(data = spdf[spdf@data$pondera_final > 119, ], clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(data = yelp_sp2[yelp_sp2@data$price=='$',])
leaflet() %>%
addTiles() %>%
addMarkers(data = spdf[spdf@data$pondera_final > 119, ], clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(data = yelp_sp2[yelp_sp2@data$price=='$',], radius = 0.2)
leaflet() %>%
addTiles() %>%
addMarkers(data = spdf[spdf@data$pondera_final > 119, ], clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(data = yelp_sp2[yelp_sp2@data$price=='$',], radius = 0.3)
leaflet() %>%
addTiles() %>%
addMarkers(data = spdf[spdf@data$pondera_final > 119, ], clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(data = yelp_sp2[yelp_sp2@data$price=='$',], radius = 0.3)
blogdown:::serve_site()
