# Convierte cada columna (excepto 'lat' y 'long') en character y el objeto en dataframe
yelp_df4 <- apply(yelp_df, 2, class)
yelp_df4 <- data.frame()
yelp_df4 <- rbind(yelp_df4, c)
yelp_df4 <- as.data.frame(yelp_df4, stringAsFactor = FALSE)
class(yelp_df4)
apply(yelp_df4, 2, class)
# Extrae el 'Title' de cada categoría
cat_title <- lapply(yelp_df4$categories, function(x) {
sapply(x, function(y) {
return(y$title)
})
})
# Elimina los signos de puntuación, excepto por los espacios y las comas
yelp_df4$categories <- as.character(cat_title) %>%
gsub(pattern = "c\\(", replacement = "") %>%
gsub(pattern =  "[^[:alnum:][:space:],]", replacement = "")
# Convierte a 'character' y elimina los caracteres resabio del tipo 'list'
yelp_df4$coordinates <- yelp_df4$coordinates %>%
as.character() %>%
gsub(pattern = "list\\(|\\)", replacement = "")
# Separa la variable 'coordinates' en 'lat' y 'long'
yelp_df4 <- separate(data = yelp_df4, col = coordinates, into = c("lat", "long"), sep = ", ")
# Elimina la palabra 'latitude'
yelp_df4$lat <- yelp_df4$lat %>%
gsub(pattern = "latitude = ", replacement = "")
# Elimina la palabra 'longitude'
yelp_df4$long <- yelp_df4$long %>%
gsub(pattern = "longitude = ", replacement = "")
# Extrae 'address' de 'location'
address_yelp <- lapply(yelp_df4$location, function(x) {
return(x$address1[1])
})
# Convierte a 'character'
yelp_df4$location <- as.character(address_yelp)
# Convierte cada columna (excepto 'lat' y 'long') en character y el objeto en dataframe
yelp_df4 <- apply(yelp_df4, 2, as.character)
yelp_df4 <- as.data.frame(yelp_df4, stringAsFactor = FALSE)
apply(yelp_df4, 2, class)
class(yelp_df4$lat)
class(yelp_df4$long)
class(yelp_df4$id)
class(yelp_df4$name)
# Convierte cada columna (excepto 'lat' y 'long') en character y el objeto en dataframe
yelp_df4 <- apply(yelp_df4, 2, as.character)
class(yelp_df4)
yelp_df4 <- as.data.frame(yelp_df4, stringsAsFactor = FALSE)
class(yelp_df4)
class(yelp_df4$name)
class(yelp_df4$id)
# Convierte cada columna (excepto 'lat' y 'long') en character y el objeto en dataframe
yelp_df4 <- apply(yelp_df4, 2, as.character)
yelp_df4 <- as.data.frame(yelp_df4, stringsAsFactor = FALSE)
# Convierte cada columna (excepto 'lat' y 'long') en character y el objeto en dataframe
yelp_df4 <- apply(yelp_df4, 2, as.character)
yelp_df4 <- as.data.frame(yelp_df4, stringsAsFactors = FALSE)
class(yelp_df4$lat)
yelp_df4$lat <- as.numeric(yelp_df4$lat)
yelp_df4$long <- as.numeric(yelp_df4$long)
leaflet() %>%
addTiles() %>%
addMarkers(data = oficinas,
lng = x,
lat = y,
clusterOptions = markerClusterOptions()) %>%
addMarkers(data = yelp_df4, lng = long, lat = lat)
leaflet() %>%
addTiles() %>%
addMarkers(data = oficinas,
lng = ~x,
lat = ~y,
clusterOptions = markerClusterOptions()) %>%
addMarkers(data = yelp_df4, lng = ~long, lat = ~lat)
leaflet() %>%
addTiles() %>%
addMarkers(data = oficinas,
lng = ~x,
lat = ~y,
clusterOptions = markerClusterOptions()) %>%
addMarkers(data = yelp_df4, lng = ~long, lat = ~lat)
leaflet() %>%
addTiles() %>%
addMarkers(data = oficinas,
lng = ~x,
lat = ~y,
clusterOptions = markerClusterOptions()) %>%
addMarkers(data = yelp_df4, lng = ~long, lat = ~lat)
library(dplyr)
leaflet() %>%
addTiles() %>%
addMarkers(data = oficinas,
lng = ~x,
lat = ~y,
clusterOptions = markerClusterOptions()) %>%
addMarkers(data = yelp_df4, lng = ~long, lat = ~lat)
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(data = oficinas,
lng = ~x,
lat = ~y,
clusterOptions = markerClusterOptions()) %>%
addMarkers(data = yelp_df4, lng = ~long, lat = ~lat)
View(yelp_df4)
blogdown:::serve_site()
blogdown:::serve_site()
b$total
total <- 1
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
# Descarga los datos de Yelp!
# Credenciales para la Yelp API
client_id <- "G6XcL9wmLQ0jT1m-Vc4CPw"
client_secret <- "4Q18wXh1KLFt0FTrPZdJSPh95P7ZqbZ6t7n3Z6Quzb6XuNspAYQmSMUyZSGDetOv"
# Gestiona el token
res <- POST("https://api.yelp.com/oauth2/token",
body = list(grant_type = "client_credentials",
client_id = client_id,
client_secret = client_secret))
library(dplyr)
library(tidyr)
library(leaflet)
library(httr)
# Descarga los datos de Yelp!
# Credenciales para la Yelp API
client_id <- "G6XcL9wmLQ0jT1m-Vc4CPw"
client_secret <- "4Q18wXh1KLFt0FTrPZdJSPh95P7ZqbZ6t7n3Z6Quzb6XuNspAYQmSMUyZSGDetOv"
# Gestiona el token
res <- POST("https://api.yelp.com/oauth2/token",
body = list(grant_type = "client_credentials",
client_id = client_id,
client_secret = client_secret))
token <- content(res)$access_token
# Endpoint de Yelp
yelp <- "https://api.yelp.com/v3"
# Los parámetros de búsqueda están en https://www.yelp.co.uk/developers/documentation/v3/business_search
location <- "Buenos Aires"
categories <- "salad,vegan,vegetarian,delis,delicatessen"
term <- "para llevar"
limit <- 50
offset <- 1
price <- "1,2"
# Todavía no sabemos la cantidad de resultados por lo que lo inicializamos con un valor de offset + 1
total <- offset + 1
# Crea un data.frame donde vamos a guardar los resultados
yelp_df <- data.frame
# Loop hasta llegar al limite de 1000 resultados
while(offset < total) {
# Construye el url de acuerdo al query deseado
url <- modify_url(url = yelp,
path = c("v3", "businesses", "search"),
query = list(location = location,
limit = limit,
offset = offset,
term = term,
price = price))
# Hace el requerimiento de los datos
res <- GET(url = url, add_headers('Authorization' = paste("bearer", token)))
# Chequea si el requerimiento fue exitoso
a <- http_status(res)
if(a$category=='Success') {
# Descarga el contenido
b <- content(res)
# Lo convierte en un data.frame
c <- do.call("rbind", lapply(b$businesses, function(x) {
return(as.data.frame(t(as.matrix(x))))}))
yelp_df <- rbind(yelp_df, c)
# Actualiza el número de resultados totales
total <- b$total
# Actualiza el valor de 'offset'
offset = offset + 50
} else {
break()
}
}
yelp_df <- rbind(yelp_df, c)
# Crea un data.frame donde vamos a guardar los resultados
yelp_df <- data.frame()
yelp_df <- rbind(yelp_df, c)
blogdown:::serve_site()
blogdown:::serve_site()
load("~/Yelp/yelp2.RData")
knitr::opts_chunk$set(echo = FALSE, cache = FALSE, fig.align = 'center', message=FALSE, warning=FALSE, error=FALSE)
setwd("C:/Users/marti/Documents/Yelp")
library(sp)
library(sf)
library(rgdal)
library(gdalUtils)
library(tmap)
library(dplyr)
library(tidyr)
library(stringr)
library(spdplyr)
library(leaflet)
library(plotly)
library(plotrix)
library(wordcloud)
library(RColorBrewer)
library(ggplot2)
library(ggmap)
load("yelp2.RData")
piechar_data <- read.csv("Piechar.csv")
leaflet() %>%
addTiles() %>%
addMarkers(data = spdf[spdf@data$pondera_final > 119, ], clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(data = yelp_sp2[yelp_sp2@data$price=='$',])
leaflet() %>%
addTiles() %>%
addMarkers(data = spdf[spdf@data$pondera_final > 119, ], clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(data = yelp_sp2[yelp_sp2@data$price=='$',], radius = 0.2)
leaflet() %>%
addTiles() %>%
addMarkers(data = spdf[spdf@data$pondera_final > 119, ], clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(data = yelp_sp2[yelp_sp2@data$price=='$',], radius = 0.3)
leaflet() %>%
addTiles() %>%
addMarkers(data = spdf[spdf@data$pondera_final > 119, ], clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(data = yelp_sp2[yelp_sp2@data$price=='$',], radius = 0.3)
blogdown:::serve_site()
View(yelp_df2)
apply(yelp_df2, 2, class)
class(yelp_df2)
getwd()
shiny::runApp('~/Yelp/App_Garat')
runApp('~/Yelp/App_Garat')
write.csv(x = yelp_df2, file = "C:\Users\marti\Google Drive\Consultora\R2\yelp_df.csv", row.names = FALSE)
write.csv(x = yelp_df2, file = "C:/Users/marti/Google Drive/Consultora/R2/yelp_df.csv", row.names = FALSE)
yelp_df <- read.csv("https://drive.google.com/open?id=1MccgzQk9h1YsEZzXGHAsgMcipQRhQcIL")
yelp_df <- read.csv("https://drive.google.com/open?id=1MccgzQk9h1YsEZzXGHAsgMcipQRhQcIL")
yelp_df <- read.table("https://drive.google.com/open?id=1MccgzQk9h1YsEZzXGHAsgMcipQRhQcIL", sep = ",")
yelp_df <- read.csv("https://drive.google.com/open?id=1MccgzQk9h1YsEZzXGHAsgMcipQRhQcIL", sep = ",")
yelp_df <- read.csv("https://drive.google.com/open?id=1MccgzQk9h1YsEZzXGHAsgMcipQRhQcIL", sep = ",", fill = TRUE)
yelp_df <- read.csv("https://drive.google.com/uc?export=download&id=1MccgzQk9h1YsEZzXGHAsgMcipQRhQcIL")
runApp('~/Yelp/App_Garat')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages("blogdown")
library(blogdown)
install.packages("RPostgreSQL")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
blogdown:::serve_site()
servr::daemon_stop()
servr::daemon_stop(1)
install.packages("wordcloud")
load("~/OPDS/bibliometrix/.RData")
summary(object = myanalysis, k = 10, pause = FALSE)
library(bibliometrix)
library(tidyverse)
summary(object = myanalysis, k = 10, pause = FALSE)
options(width=100)
summary(object = myanalysis, k = 10, pause = FALSE)
scopus_summary
scopus_summary <- summary(object = myanalysis, k = 10, pause = FALSE)
scopus_summary
scopus_summary$MainInformationDF
print(scopus_summary$MainInformationDF)
(scopus_summary$MainInformationDF)
scopus_summary$MainInformationDF
scopus_summary$MainInformationDF
scopus_summary$MainInformationDF
scopus_summary
plot(x = myanalysis, k = 10, pause = FALSE, )
plot(x = myanalysis, k = 10, pause = FALSE)
windows()
wordcloud(words = keywords$AuthorKW[-1],
freq = keywords$AuthorKW_count[-1],
scale = c(2,.2),
random.order = FALSE,
random.color = FALSE,
max.words = Inf,
#          rot.per = .3,
colors = pal2)
library(wordcloud)
wordcloud(words = keywords$AuthorKW[-1],
freq = keywords$AuthorKW_count[-1],
scale = c(2,.2),
random.order = FALSE,
random.color = FALSE,
max.words = Inf,
#          rot.per = .3,
colors = pal2)
wordcloud(words = keywordsARG$AuthorKW[-1],
freq = keywordsARG$AuthorKW_count[-1],
scale = c(2,.2),
random.order = FALSE,
random.color = FALSE,
max.words = Inf,
colors = pal2, rot.per = 0, fixed.asp = TRUE)
wordcloud(words = keywordsARG$AuthorKW[-1],
freq = keywordsARG$AuthorKW_count[-1],
scale = c(2,.2),
random.order = TRUE,
random.color = FALSE,
max.words = Inf,
colors = pal2, rot.per = 0, fixed.asp = TRUE)
wordcloud(words = keywordsARG$AuthorKW[-1],
freq = keywordsARG$AuthorKW_count[-1],
scale = c(2,.2),
random.order = FALSE,
random.color = FALSE,
max.words = Inf,
colors = pal2,
rot.per = 0,
fixed.asp = TRUE)
wordcloud(words = keywordsARG$AuthorKW[-1],
freq = keywordsARG$AuthorKW_count[-1],
scale = c(2,.2),
random.order = FALSE,
random.color = FALSE,
max.words = Inf,
colors = pal2,
rot.per = 0,
fixed.asp = TRUE, use.r.layout = TRUE)
windows(10, 10)
wordcloud(words = keywordsARG$AuthorKW[-1],
freq = keywordsARG$AuthorKW_count[-1],
scale = c(2,.2),
random.order = FALSE,
random.color = FALSE,
max.words = Inf,
colors = pal2,
rot.per = 0,
fixed.asp = TRUE, use.r.layout = TRUE)
windows(14, 14)
wordcloud(words = keywordsARG$AuthorKW[-1],
freq = keywordsARG$AuthorKW_count[-1],
scale = c(2,.2),
random.order = FALSE,
random.color = FALSE,
max.words = Inf,
colors = pal2,
rot.per = 0,
fixed.asp = TRUE, use.r.layout = TRUE)
wordcloud(words = keywordsARG$AuthorKW[-1],
freq = keywordsARG$AuthorKW_count[-1],
scale = c(2,.2),
random.order = FALSE,
random.color = FALSE,
max.words = Inf,
colors = pal2,
rot.per = 0,
fixed.asp = TRUE, use.r.layout = TRUE)
windows(14, 14)
wordcloud(words = keywordsARG$AuthorKW[-1],
freq = keywordsARG$AuthorKW_count[-1],
scale = c(2,.2),
random.order = FALSE,
random.color = FALSE,
max.words = Inf,
colors = pal2,
rot.per = 0,
fixed.asp = TRUE, use.r.layout = TRUE)
windows(14, 7)
wordcloud(words = keywordsARG$AuthorKW[-1],
freq = keywordsARG$AuthorKW_count[-1],
scale = c(2,.2),
random.order = FALSE,
random.color = FALSE,
max.words = Inf,
colors = pal2,
rot.per = 0,
fixed.asp = TRUE, use.r.layout = TRUE)
windows()
wordcloud(words = keywords$ScopusKW[-1],
freq = keywords$ScopusKW_count[-1],
scale = c(2,.2),
random.order = FALSE,
random.color = FALSE,
max.words = Inf,
#          rot.per = .3,
colors = pal2)
windows()
wordcloud(words = keywords$AuthorKW[-1],
freq = keywords$AuthorKW_count[-1],
scale = c(2,.2),
random.order = FALSE,
random.color = FALSE,
max.words = Inf,
#          rot.per = .3,
colors = pal2)
wordcloud(words = keywords$AuthorKW[-1],
freq = keywords$AuthorKW_count[-1],
scale = c(2,.2),
random.order = FALSE,
random.color = FALSE,
max.words = Inf,
rot.per = 0,
colors = pal2)
setwd('C:/Users/marti/Documents/OPDS/bibliometrix')
png("scopus_keywords1.png", width=1280,height=800)
wordcloud(words = keywords$AuthorKW[-1],
freq = keywords$AuthorKW_count[-1],
scale = c(2,.2),
random.order = FALSE,
random.color = FALSE,
max.words = Inf,
rot.per = 0,
colors = pal2)
dev.off()
windows()
wordcloud(words = keywords$AuthorKW[-1],
freq = keywords$AuthorKW_count[-1],
scale = c(2,.2),
random.order = FALSE,
random.color = FALSE,
max.words = Inf,
rot.per = 0,
colors = pal2)
windows()
wordcloud(words = keywords$AuthorKW[-1],
freq = keywords$AuthorKW_count[-1],
scale = c(5,.5),
random.order = FALSE,
random.color = FALSE,
max.words = Inf,
rot.per = 0,
colors = pal2)
windows()
wordcloud(words = keywords$AuthorKW[-1],
freq = keywords$AuthorKW_count[-1],
scale = c(3,.3),
random.order = FALSE,
random.color = FALSE,
max.words = Inf,
rot.per = 0,
colors = pal2)
getwd
getwd()
windows()
wordcloud(words = keywords$ScopusKW[-1],
freq = keywords$ScopusKW_count[-1],
scale = c(2,.2),
random.order = FALSE,
random.color = FALSE,
max.words = Inf,
rot.per = 0,
colors = pal2)
windows()
networkPlot(NetMatrix = KEY_cooccur,
normalize = "association",
weighted = TRUE,
n = 50,
Title = "Co-ocurrencia de palabras clave",
type = "vosviewer",
size=TRUE,
labelsize=0.7,
cluster = "optimal",
vos.path = "C:/Users/marti/Desktop/VOSviewer")
class(scopus_plot)
scopus_plot
setwd('C:/Users/marti/Documents/OPDS/bibliometrix')
files <- list.files(pattern = "^scopus")
mydata3 <- map_df(files, function(x) {
tmp <- readFiles(x)
return(scopus2df(tmp))
})
mydata3 <- map_df(files, function(x) {
tmp <- readFiles(x)
scopus2df(tmp)
})
networkPlot(CO_collab, n = dim(CO_collab)[1], Title = "Colaboración entre Países", type = "circle", size=TRUE, remove.multiple=FALSE,labelsize=0.7,cluster="none", degree = 100)
library(tidyverse)
library(bibliometrix)
networkPlot(CO_collab, n = dim(CO_collab)[1], Title = "Colaboración entre Países", type = "circle", size=TRUE, remove.multiple=FALSE,labelsize=0.7,cluster="none", degree = 100)
networkPlot(CO_collab, n = dim(CO_collab)[1], Title = "Colaboración entre Países", type = "vosviewer", size=TRUE, remove.multiple=FALSE,labelsize=0.7,cluster="none", degree = 100)
networkPlot(NetMatrix = CO_collab,
n = dim(CO_collab)[1],
Title = "Colaboración entre Países",
type = "vosviewer",
size=TRUE,
remove.multiple=FALSE,
labelsize=0.7,
cluster="none",
vos.path = "C:/Users/marti/Desktop/VOSviewer")
networkPlot(NetMatrix = CO_collab,
n = dim(CO_collab)[1],
Title = "Colaboración entre Países",
type = "vosviewer",
size=TRUE,
remove.multiple=FALSE,
labelsize=0.7,
cluster="none",
vos.path = "C:/Users/marti/Desktop/VOSviewer")
networkPlot(NetMatrix = CO_collab,
n = dim(CO_collab)[1],
Title = "Colaboración entre Países",
type = "vosviewer",
size=TRUE,
remove.multiple=FALSE,
labelsize=0.7,
cluster="optimal",
vos.path = "C:/Users/marti/Desktop/VOSviewer")
networkPlot(NetMatrix = CO_collab,
n = dim(CO_collab)[1],
Title = "Colaboración entre Países",
type = "vosviewer",
size=TRUE,
remove.multiple=FALSE,
labelsize=0.7,
cluster="optimal",
vos.path = "C:/Users/marti/Desktop/VOSviewer")
plot(x = myanalysisARG, k = 10, pause = FALSE)
blogdown:::serve_site()
blogdown:::serve_site()
install.packages("bibliometrix")
install.packages("coreNLP")
library(coreNLP)
